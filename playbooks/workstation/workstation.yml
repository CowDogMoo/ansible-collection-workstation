---
- name: Workstation
  hosts: all
  roles:
    # Set up logging first to ensure log directories exist for other roles
    - name: Configure logging and log rotation
      role: cowdogmoo.workstation.logging
      # For debugging
      # role: ../../roles/logging
      vars:
        logging_directories:
          - path: "~/ansible-logs"
            mode: "0755"
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_gid | default(ansible_user_id) }}"
          - path: "~/ansible-logs/hosts"  # For log_plays callback
            mode: "0755"
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_gid | default(ansible_user_id) }}"

        logging_rotation_configs:
          - name: "ansible-hosts"
            path: "~/ansible-logs/hosts/*"
            rotate: 30
            frequency: "daily"
            compress: true
            missingok: true
            notifempty: true
            create: true
            dateext: true
            maxsize: "100M"
            copytruncate: true
            delaycompress: true
            owner: "{{ ansible_user_id }}"
            group: "{{ ansible_user_gid | default(ansible_user_id) }}"

        # Optional: Override default LaunchAgent settings for macOS
        logging_launchagent_label: "com.ansible.logrotate"
        logging_logrotate_log_path: "{{ ansible_env.HOME }}/ansible-logs/logrotate"

    # Install and configure Alloy for log shipping to Loki
    # This should come after logging setup to ensure directories exist
    - name: Install and configure Grafana Alloy
      role: grafana.grafana.alloy
      become: "{{ ansible_os_family != 'Darwin' }}"
      vars:
        # Alloy configuration for log collection and shipping to Loki
        alloy_config: |
          // Enable debug logging to help troubleshoot
          logging {
            level  = "debug"
            format = "logfmt"
          }

          // Discover and read all non-compressed host log files
          local.file_match "ansible_logs" {
            path_targets = [{
              __path__ = env("HOME") + "/ansible-logs/hosts/*",
              job      = "ansible",
              environment = "local",
            }]
            sync_period = "10s"
          }

          // Read logs from the discovered files
          loki.source.file "ansible" {
            targets    = local.file_match.ansible_logs.targets
            forward_to = [loki.process.ansible.receiver]

            // Start reading from the beginning to catch existing logs
            tail_from_end = false
          }

          // Process logs and extract hostname from filename
          loki.process "ansible" {
            // Extract the hostname from the file path
            stage.regex {
              expression = ".*/hosts/(?P<extracted_hostname>[^/]+)$"
              source     = "filename"
            }

            // Drop logs from compressed files (files containing .gz)
            stage.match {
              selector = `{filename=~".*\\.gz.*"}`
              action   = "drop"
            }

            // Check if it's a localhost file and create a flag
            stage.regex {
              expression = "^(?P<is_localhost>localhost(-[0-9]+)?)$"
              source     = "extracted_hostname"
            }

            // Use template to set the final hostname
            // If is_localhost exists (matches localhost pattern), use constants.hostname
            // Otherwise use the extracted_hostname
            stage.template {
              source   = "final_hostname"
              template = `{{"{{ if .is_localhost }}"}}` + constants.hostname + `{{"{{ else }}"}}{{ "{{" }} .extracted_hostname {{ "}}" }}{{"{{ end }}"}}`
            }

            // Add the processed hostname as labels
            stage.labels {
              values = {
                host   = "final_hostname",
                source = "final_hostname",
              }
            }

            // Add static labels
            stage.static_labels {
              values = {
                application  = "ansible",
                environment  = "local",
                service_name = "ansible",
              }
            }
            forward_to = [loki.write.remote.receiver]
          }

          // Send logs to Loki
          loki.write "remote" {
            endpoint {
              url = "https://loki.techvomit.xyz/loki/api/v1/push"
            }
          }

    - name: Setup users on workstation
      role: cowdogmoo.workstation.user_setup
      # For debugging
      # role: ../../roles/user_setup

    - name: Setup ZSH Configuration
      role: cowdogmoo.workstation.zsh_setup
      # For debugging
      # role: ../../roles/zsh_setup

    - name: Setup ASDF Configuration
      role: cowdogmoo.workstation.asdf
      # For debugging
      # role: ../../roles/asdf

    - name: Install Go Task
      role: cowdogmoo.workstation.go_task
      # For debugging
      # role: ../../roles/go_task
