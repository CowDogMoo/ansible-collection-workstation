{
  $schema: "https://docs.renovatebot.com/renovate-schema.json",
  gitAuthor: "cowdogmoo-renovate-bot <157187596+cowdogmoo-renovate-bot[bot]@users.noreply.github.com>",
  extends: [
    "config:best-practices",
    "docker:enableMajor",
    ":dependencyDashboard",
    ":semanticCommits",
    ":enablePreCommit",
    ":automergeDigest"
  ],

  dependencyDashboardLabels: ["renovate"],
  dependencyDashboardTitle: "Renovate Dashboard ðŸ¤–",
  suppressNotifications: ["prIgnoreNotification"],
  rebaseWhen: "conflicted",
  commitBodyTable: true,
  labels: ["renovate"],

  packageRules: [
    // Auto-merge Galaxy digest updates
    {
      description: "Auto merge Galaxy dependencies",
      matchDatasources: ["galaxy"],
      automerge: true,
      automergeType: "pr",
      matchUpdateTypes: ["digest"]
    },

    // Auto-merge GitHub Actions minors/patches
    {
      description: "Auto-merge GitHub Actions",
      matchManagers: ["github-actions"],
      matchDatasources: ["github-tags"],
      automerge: true,
      automergeType: "pr",
      matchUpdateTypes: ["minor", "patch"]
    },

    // Group Galaxy dependencies
    {
      description: "Group Ansible Galaxy dependencies",
      matchManagers: ["ansible-galaxy"],
      groupName: "ansible-dependencies"
    },

    // Version extraction helpers for asdf inline comments
    { matchPackageNames: ["golang/go"],  extractVersion: "^go(?<version>.*)$" },
    { matchPackageNames: ["python/cpython"], extractVersion: "^v(?<version>.+)$" },
    { matchPackageNames: ["ruby/ruby"], extractVersion: "^v(?<major>\\d+)_(?<minor>\\d+)_(?<patch>\\d+)$" }
  ],

  customManagers: [
    {
      customType: "regex",
      description: "Update asdf tool versions embedded in Ansible defaults",
      managerFilePatterns: ["/roles/asdf/defaults/main.yml$"],
      matchStrings: [
        "# renovate: datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)(?: versioning=(?<versioning>\\S+))?(?: extractVersion=(?<extractVersion>\\S+))?\\s+- name: \\S+\\s+version: [\"']?(?<currentValue>[^\"'\\s]+)[\"']?"
      ],
      versioningTemplate: "{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}"
    }
  ]
}
