---
- name: Enable persistent services for all users
  become: true
  ansible.builtin.command: loginctl enable-linger {{ item.username }}
  loop: "{{ vnc_setup_users }}"
  changed_when: false

- name: Create systemd directories
  become: true
  ansible.builtin.file:
    path: "/home/{{ item.username }}/.config/systemd/user"
    state: directory
    mode: "0744"
    owner: "{{ item.username }}"
    group: "{{ item.usergroup | default(item.username) }}"
  loop: "{{ vnc_setup_users }}"

- name: Check existence of per-user systemd service files
  become: true
  ansible.builtin.stat:
    path: "/home/{{ item.username }}/.config/systemd/user/vncserver.service"
  loop: "{{ vnc_setup_users }}"
  register: vncserver_service_check

- name: Update per-user systemd service files
  become: true
  ansible.builtin.template:
    src: vncserver.j2
    dest: "/home/{{ item.username }}/.config/systemd/user/vncserver.service"
    mode: "0744"
    owner: "{{ item.username }}"
    group: "{{ item.usergroup | default(item.username) }}"
  loop: "{{ vnc_setup_users }}"

- name: Get uids of {{ vnc_setup_users }}
  ansible.builtin.command: id -u {{ item.username }}
  loop: "{{ vnc_setup_users }}"
  check_mode: false
  changed_when: false
  register: uids

- name: "Create uid_results from {{ uids.results }}"
  ansible.builtin.set_fact:
    uid_results: "{{ uid_results | default([]) + [item.stdout] }}"
  loop: "{{ uids.results }}"

- name: "Merge uids into vnc_setup_users"
  cowdogmoo.workstation.merge_list_dicts_into_list:
    ls_dicts: "{{ vnc_setup_users }}"
    ls: "{{ uid_results }}"
  register: vnc_setup_users_uid

- name: Set fact for vncserver service file existence
  ansible.builtin.set_fact:
    vncserver_service_exists: "{{ vncserver_service_check.results | map(attribute='stat.exists') | list }}"

- name: Add start_vnc script to profile.d
  become: true
  ansible.builtin.template:
    src: start_vnc.sh.j2
    dest: "/etc/profile.d/start_vnc.sh"
    mode: "0755"

- name: Create XDG_RUNTIME_DIR script in /etc/profile.d
  become: true
  ansible.builtin.copy:
    dest: /etc/profile.d/xdg_runtime_dir.sh
    content: |
      #!/bin/sh
      export XDG_RUNTIME_DIR="/run/user/$(id -u)"
    mode: "0755"

- name: Check if VNC service is enabled and running
  become: true
  become_user: "{{ item.username }}"
  ansible.builtin.command: systemctl --user is-active --quiet vncserver.service
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ item.uid }}"
    DBUS_SESSION_BUS_ADDRESS: "unix:path=/run/user/{{ item.uid }}/bus"
  loop: "{{ vnc_setup_users_uid.result }}"
  ignore_errors: true
  changed_when: false
  register: vnc_service_status

- name: "Enable VNC service for {{ vnc_setup_users_uid }}"
  become: true
  become_user: "{{ item.0.username }}"
  ansible.builtin.systemd:
    daemon_reload: true
    enabled: true
    name: vncserver.service
    scope: user
    state: started
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ item.0.uid }}"
    DBUS_SESSION_BUS_ADDRESS: "unix:path=/run/user/{{ item.0.uid }}/bus"
  loop: "{{ vnc_setup_users_uid.result | zip(vncserver_service_exists) | list }}"
  when: vnc_service_status.results | selectattr('item.username', 'equalto', item.0.username) | map(attribute='rc') | first == 3
