---
- name: Include OS-specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family | lower }}.yml"
        - "default.yml"
      paths:
        - vars
      skip: true

- name: Determine system architecture
  ansible.builtin.set_fact:
    go_task_arch: "{{ go_task_arch_map[ansible_architecture] | default(ansible_architecture) }}"

- name: Determine system OS
  ansible.builtin.set_fact:
    go_task_os: "{{ go_task_os_map[ansible_system] | default(ansible_system | lower) }}"

- name: Check if go-task is already installed
  ansible.builtin.stat:
    path: "{{ go_task_install_dir }}/task"
  register: go_task_installed
  when: ansible_os_family != 'Windows'

- name: Check if go-task is already installed on Windows
  ansible.windows.win_stat:
    path: "{{ go_task_windows_install_dir }}\task.exe"
  register: go_task_installed_windows
  when: ansible_os_family == 'Windows'

- name: Get installed version
  ansible.builtin.command: "{{ go_task_install_dir }}/task --version"
  register: go_task_installed_version
  changed_when: false
  failed_when: false
  when:
    - ansible_os_family != 'Windows'
    - go_task_installed.stat.exists | default(false)

- name: Get installed version on Windows
  ansible.windows.win_command: "{{ go_task_windows_install_dir }}\task.exe --version"
  register: go_task_installed_version_windows
  changed_when: false
  failed_when: false
  when:
    - ansible_os_family == 'Windows'
    - go_task_installed_windows.stat.exists | default(false)

- name: Get latest version if not specified
  when: go_task_version == "latest"
  block:
    - name: Get latest release information
      ansible.builtin.uri:
        url: "{{ go_task_github_api_url }}/latest"
        method: GET
        headers:
          Accept: "application/vnd.github.v3+json"
      register: go_task_latest_release
      retries: 3
      delay: 2

    - name: Set version to latest
      ansible.builtin.set_fact:
        go_task_version: "{{ go_task_latest_release.json.tag_name | regex_replace('^v', '') }}"

- name: Determine if installation is needed
  ansible.builtin.set_fact:
    go_task_needs_install: >-
      {{
        (ansible_os_family != 'Windows' and not go_task_installed.stat.exists | default(true)) or
        (ansible_os_family == 'Windows' and not go_task_installed_windows.stat.exists | default(true)) or
        (go_task_installed_version.stdout | default('') is not search('v' + go_task_version)) or
        (go_task_installed_version_windows.stdout | default('') is not search('v' + go_task_version))
      }}

- name: Install go-task on Unix-like systems
  ansible.builtin.include_tasks: install-unix.yml
  when:
    - ansible_os_family != 'Windows'
    - go_task_needs_install

- name: Install go-task on Windows systems
  ansible.builtin.include_tasks: install-windows.yml
  when:
    - ansible_os_family == 'Windows'
    - go_task_needs_install
