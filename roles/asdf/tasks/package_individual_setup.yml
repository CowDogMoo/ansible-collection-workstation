---
- name: "Install asdf plugin for {{ package.name }}"
  ansible.builtin.shell:
    cmd: |
      . /usr/local/bin/setup_asdf_env "{{ user.username }}"
      if ! asdf plugin list | grep -q "{{ package.name }}"; then
        asdf plugin add "{{ package.name }}"
      fi
    executable: "{{ user.shell }}"
  become: true
  become_user: "{{ user.username }}"
  loop: "{{ asdf_users }}"
  loop_control:
    loop_var: user

- name: "Check if {{ package.name }} version {{ package.version }} is installed"
  ansible.builtin.shell:
    cmd: |
      . /usr/local/bin/setup_asdf_env "{{ user.username }}"
      asdf list "{{ package.name }}" | grep -q "{{ package.version }}"
    executable: "{{ user.shell }}"
  register: version_check
  failed_when: version_check.rc > 1
  changed_when: version_check.rc == 1
  become: true
  become_user: "{{ user.username }}"
  loop: "{{ asdf_users }}"
  loop_control:
    loop_var: user
  when: package.name and package.version

- name: "Install asdf plugin for {{ package.name }}"
  ansible.builtin.shell:
    cmd: |
      . /usr/local/bin/setup_asdf_env "{{ user.username }}"
      asdf plugin add "{{ package.name }}"
    executable: "{{ user.shell }}"
  when: "'{{ package.name }}' not in global_plugin_list.stdout"
  become: true
  become_user: "{{ user.username }}"
  loop: "{{ asdf_users }}"
  loop_control:
    loop_var: user

- name: "Install {{ package.name }} version {{ package.version }}"
  ansible.builtin.shell:
    cmd: |
      . /usr/local/bin/setup_asdf_env "{{ user.username }}"
      asdf install "{{ package.name }}" "{{ package.version }}"
    executable: "{{ user.shell }}"
  when: "'{{ package.name }}' not in global_plugin_list.stdout" 
  become: true
  become_user: "{{ user.username }}"
  loop: "{{ asdf_users }}"
  loop_control:
    loop_var: user

- name: "Set {{ package.name }} version {{ package.version }} {{ package.scope }}"
  ansible.builtin.shell:
    cmd: |
      . /usr/local/bin/setup_asdf_env "{{ user.username }}"
      asdf "{{ package.scope }}" "{{ package.name }}" "{{ package.version }}"
    executable: "{{ user.shell }}"
  when: version_check is defined and version_check.changed
  become: true
  become_user: "{{ user.username }}"
  loop: "{{ asdf_users }}"
  loop_control:
    loop_var: user
