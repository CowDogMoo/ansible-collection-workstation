---
- name: Set default username for Kali systems
  ansible.builtin.set_fact:
    asdf_default_username: "kali"
  when: ansible_distribution_release == "kali-rolling" and asdf_default_username is not defined

- name: Include asdf_get_enriched_users tasks
  ansible.builtin.include_tasks: asdf_get_enriched_users.yml
  when: not asdf_global_install

- name: Download ASDF binary
  ansible.builtin.get_url:
    url: "{{ asdf_download_url }}"
    dest: "/tmp/asdf-{{ asdf_version }}.tar.gz"
    checksum: "md5:{{ lookup('url', asdf_checksum_url) }}"
    mode: "0644"
  when: asdf_global_install

- name: Check available shells
  ansible.builtin.stat:
    path: "{{ shell_path }}"
  register: shell_check
  with_items: "{{ asdf_shells }}"
  loop_control:
    loop_var: shell_path
  changed_when: false
  when: not asdf_global_install

- name: Set available shell fact
  ansible.builtin.set_fact:
    available_shell: "{{ (shell_check.results | selectattr('stat.exists', 'true') | list | first).item | default('/bin/sh') }}"
  when: not asdf_global_install

- name: Set user shell to available shell
  ansible.builtin.set_fact:
    asdf_enriched_users: >-
      {{ asdf_enriched_users | map('combine', {
        'shell': available_shell
      }) | list }}
  when:
    - not asdf_global_install
    - asdf_enriched_users is defined
    - available_shell is defined

- name: Create global ASDF installation directory
  ansible.builtin.file:
    path: "/opt/asdf"
    state: directory
    mode: "0755"
  become: true
  when: asdf_global_install

- name: Extract ASDF binary globally
  ansible.builtin.unarchive:
    src: "/tmp/asdf-{{ asdf_version }}.tar.gz"
    dest: "/opt/asdf"
    remote_src: true
    extra_opts: [ "--strip-components=1" ]
  become: true
  when: asdf_global_install

- name: Create asdf.sh script for global ASDF installation
  ansible.builtin.copy:
    dest: "/etc/profile.d/asdf.sh"
    content: |
      export ASDF_DATA_DIR=/opt/asdf
      export PATH="/opt/asdf/bin:$PATH"
    mode: "0644"
  become: true
  when: asdf_global_install

- name: Fetch ASDF MD5 checksum
  ansible.builtin.get_url:
    url: "{{ asdf_checksum_url }}"
    dest: "/tmp/asdf-{{ asdf_version }}-{{ asdf_os }}-{{ asdf_arch }}.tar.gz.md5"
    mode: "0644"
  when: not asdf_global_install

- name: Extract ASDF MD5 checksum
  ansible.builtin.shell:
    cmd: "cat /tmp/asdf-{{ asdf_version }}-{{ asdf_os }}-{{ asdf_arch }}.tar.gz.md5"
  register: asdf_checksum
  changed_when: false
  when: not asdf_global_install

- name: Download ASDF binary for each user
  ansible.builtin.get_url:
    url: "{{ asdf_download_url }}"
    dest: "/tmp/asdf-{{ asdf_version }}-{{ user.username }}.tar.gz"
    checksum: "md5:{{ asdf_checksum.stdout | trim }}"
    mode: "0644"
  loop: "{{ asdf_enriched_users }}"
  loop_control:
    loop_var: user
  when: not asdf_global_install

# Ensure each userâ€™s .asdf directory exists BEFORE extraction
- name: Ensure .asdf directory exists for each user
  ansible.builtin.file:
    path: "{{ user.home }}/.asdf"
    state: directory
    owner: "{{ user.username }}"
    group: "{{ user.usergroup | default(user.username) }}"
    mode: "0755"
  loop: "{{ asdf_enriched_users }}"
  loop_control:
    loop_var: user
  become: true
  when: not asdf_global_install

- name: Extract ASDF binary for each user
  ansible.builtin.unarchive:
    src: "/tmp/asdf-{{ asdf_version }}-{{ user.username }}.tar.gz"
    dest: "{{ user.home }}/.asdf"
    remote_src: true
    extra_opts: [ "--strip-components=1" ]
    owner: "{{ user.username }}"
    group: "{{ user.usergroup | default(user.username) }}"
  become: true
  loop: "{{ asdf_enriched_users }}"
  loop_control:
    loop_var: user
  when: not asdf_global_install

- name: Deploy .tool-versions file
  ansible.builtin.copy:
    dest: "{{ user.home }}/.tool-versions"
    content: |
      {% for plugin in user.plugins %}
      {{ plugin.name }} {{ plugin.version }}
      {% endfor %}
    owner: "{{ user.username }}"
    group: "{{ user.usergroup | default(user.username) }}"
    mode: "0644"
  become: true
  become_user: "{{ user.username }}"
  loop: "{{ asdf_enriched_users }}"
  loop_control:
    loop_var: user
  when:
    - not asdf_global_install
    - user.plugins is defined

- name: Ensure .asdf directory exists for each user
  ansible.builtin.include_tasks: ensure_directory_exists.yml
  args:
    apply:
      become: "{{ ansible_facts['os_family'] != 'Darwin' }}"
  vars:
    directories:
      - path: "{{ user.home }}/.asdf"
        owner: "{{ user.username }}"
        group: "{{ user.usergroup | default(user.username) }}"
        mode: "0755"
  loop: "{{ asdf_enriched_users }}"
  loop_control:
    loop_var: user
  when: not asdf_global_install

- name: Set permissions for each user's ASDF directory
  ansible.builtin.include_tasks: ensure_directory_exists.yml
  args:
    apply:
      become: "{{ ansible_facts['os_family'] != 'Darwin' }}"
  vars:
    directories:
      - path: "{{ user.home }}/.asdf"
        owner: "{{ user.username }}"
        group: "{{ user.usergroup | default(user.username) }}"
        recurse: true
  loop: "{{ asdf_enriched_users }}"
  loop_control:
    loop_var: user
  when: not asdf_global_install

- name: Include task to update shell profiles for each user
  ansible.builtin.include_tasks: update_shell_profiles.yml
  vars:
    line: "{{ user.shell_profile_lines }}"
  loop: "{{ asdf_enriched_users }}"
  loop_control:
    loop_var: user
  when: not asdf_global_install

- name: Template ASDF environment setup script
  ansible.builtin.template:
    src: setup_asdf_env.sh.j2
    dest: "{{ asdf_install_script_path }}"
    mode: "0755"
  vars:
    shell_to_use: "{{ available_shell | default('/bin/sh') }}"
  when: not asdf_global_install

- name: Gather installed ASDF plugins and versions for each user
  ansible.builtin.shell:
    cmd: |
      {% if user.shell != '/bin/sh' %}
      set -o pipefail
      {% endif %}
      export ASDF_DIR="{{ user.home }}/.asdf"
      if [ -f "${ASDF_DIR}/asdf.sh" ]; then
        . "${ASDF_DIR}/asdf.sh"
      fi
      {% if user.plugins is defined %}
      {% for plugin in user.plugins %}
      if command -v asdf >/dev/null 2>&1; then
        if ! asdf plugin list 2>/dev/null | grep -q {{ plugin.name }}; then
          asdf plugin add {{ plugin.name }} || true;
        fi;
      fi;
      {% endfor %}
      plugins=$(asdf plugin list 2>/dev/null || echo "")
      versions=$(asdf list all 2>/dev/null | tr '\n' ',' || echo "")
      echo "plugins:${plugins},versions:${versions}"
      {% else %}
      echo "plugins:,versions:"
      {% endif %}
    executable: "{{ user.shell }}"
  register: asdf_info
  changed_when: false
  become: true
  become_user: "{{ user.username }}"
  loop: "{{ asdf_enriched_users }}"
  loop_control:
    loop_var: user
  ignore_errors: true
  when: not asdf_global_install

- name: Install libyaml from source
  ansible.builtin.include_tasks: install_libyaml.yml
  when: ansible_distribution == 'Rocky'

- name: Install asdf plugins and set versions
  ansible.builtin.include_tasks: install_asdf_plugins.yml
