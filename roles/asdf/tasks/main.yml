---
- name: Set default username for Kali systems
  ansible.builtin.set_fact:
    asdf_username: "kali"
  when: ansible_distribution_release == "kali-rolling" and asdf_username is not defined

- name: Reapply external asdf_plugins variable if provided
  ansible.builtin.set_fact:
    asdf_plugins: "{{ hostvars[inventory_hostname]['asdf_plugins'] | default(asdf_plugins) }}"
  when: hostvars[inventory_hostname]['asdf_plugins'] is defined

- name: Check available shells
  ansible.builtin.stat:
    path: "{{ item }}"
  register: shell_check
  with_items: "{{ asdf_shells }}"
  changed_when: false

- name: Set available shell fact
  ansible.builtin.set_fact:
    available_shell: "{{ (shell_check.results | selectattr('stat.exists', 'true') | list | first).item | default('/bin/sh') }}"

- name: Fetch ASDF MD5 checksum
  ansible.builtin.get_url:
    url: "{{ asdf_checksum_url }}"
    dest: "/tmp/asdf-{{ asdf_version }}-{{ asdf_os }}-{{ asdf_arch }}.tar.gz.md5"
    mode: "0644"

- name: Extract ASDF MD5 checksum
  ansible.builtin.command: "cat /tmp/asdf-{{ asdf_version }}-{{ asdf_os }}-{{ asdf_arch }}.tar.gz.md5"
  register: asdf_checksum
  changed_when: false

- name: Download ASDF binary
  ansible.builtin.get_url:
    url: "{{ asdf_download_url }}"
    dest: "/tmp/asdf-{{ asdf_version }}.tar.gz"
    checksum: "md5:{{ asdf_checksum.stdout | trim }}"
    mode: "0644"

- name: Ensure .asdf directory exists
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.asdf"
    state: directory
    owner: "{{ asdf_username }}"
    group: "{{ asdf_usergroup }}"
    mode: "0755"
  become: "{{ ansible_facts['os_family'] != 'Darwin' }}"

- name: Extract ASDF binary
  ansible.builtin.unarchive:
    src: "/tmp/asdf-{{ asdf_version }}.tar.gz"
    dest: "{{ ansible_env.HOME }}/.asdf"
    remote_src: true
    extra_opts: [ "--strip-components=1" ]
    owner: "{{ asdf_username }}"
    group: "{{ asdf_username }}"
    mode: "0755"
  become: true

- name: Update shell profile for ASDF
  ansible.builtin.include_tasks: update_shell_profile.yml
  vars:
    asdf_enriched_user:
      username: "{{ asdf_username }}"
      usergroup: "{{ asdf_usergroup }}"
      home: "{{ ansible_env.HOME }}"
      shell: "{{ available_shell }}"
      shell_profile_lines:
        - "# ASDF Setup"
        - "export ASDF_DIR=$HOME/.asdf"
        - ". \"$HOME/.asdf/asdf.sh\""
        - ". \"$HOME/.asdf/completions/asdf.bash\""

- name: Ensure ASDF bin directory exists
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.asdf/bin"
    state: directory
    owner: "{{ asdf_username }}"
    group: "{{ asdf_username }}"
    mode: "0755"
  become: "{{ ansible_facts['os_family'] != 'Darwin' }}"

- name: Download asdf.sh file
  ansible.builtin.get_url:
    url: "https://raw.githubusercontent.com/asdf-vm/asdf/master/asdf.sh"
    dest: "{{ ansible_env.HOME }}/.asdf/asdf.sh"
    mode: "0644"
    owner: "{{ asdf_username }}"
    group: "{{ asdf_username }}"
  become: true

- name: Copy asdf script to bin directory
  ansible.builtin.copy:
    src: "{{ ansible_env.HOME }}/.asdf/asdf.sh"
    dest: "{{ ansible_env.HOME }}/.asdf/bin/asdf"
    remote_src: yes
    mode: "0755"
    owner: "{{ asdf_username }}"
    group: "{{ asdf_username }}"
  become: true

- name: Install libyaml from source
  ansible.builtin.include_tasks: install_libyaml.yml
  when: ansible_distribution == 'Rocky'

- name: Set common ASDF environment variables
  ansible.builtin.set_fact:
    asdf_env:
      HOME: "{{ ansible_env.HOME }}"
      ASDF_DIR: "{{ ansible_env.HOME }}/.asdf"
      PATH: "{{ ansible_env.HOME }}/.asdf/bin:{{ ansible_env.HOME }}/.asdf/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
      USER: "{{ asdf_username }}"

- name: Verify ASDF installation and initialize environment
  ansible.builtin.shell: |
    set -o pipefail
    if [ ! -f "${ASDF_DIR}/asdf.sh" ]; then
      echo "ASDF not properly initialized - asdf.sh missing" >&2
      exit 1
    fi
    . "${ASDF_DIR}/asdf.sh"
    if ! command -v asdf >/dev/null 2>&1; then
      echo "ASDF command not found in PATH" >&2
      exit 1
    fi
  args:
    executable: /bin/bash
  environment: "{{ asdf_env }}"
  become: true
  become_user: "{{ asdf_username }}"
  changed_when: false

- name: Install and configure plugins
  ansible.builtin.shell: |
    set -eo pipefail
    . "${ASDF_DIR}/asdf.sh"

    # Add plugin if not present
    if ! asdf plugin list | grep -q "{{ item.name }}"; then
      asdf plugin add "{{ item.name }}"
    fi

    # Install specific version if provided, otherwise get latest
    VERSION="{{ item.version | default('latest') }}"

    # If version is 'latest', find the latest version
    if [ "$VERSION" = "latest" ]; then
      VERSION=$(asdf list-all "{{ item.name }}" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | tail -n 1)
    fi

    # Install plugin version
    asdf install "{{ item.name }}" "${VERSION}"

    # Set scope based on item.scope, default to global
    SCOPE="{{ item.scope | default('global') }}"
    if [ "$SCOPE" = "global" ]; then
      asdf global "{{ item.name }}" "${VERSION}"
    else
      asdf local "{{ item.name }}" "${VERSION}"
    fi

    echo "${VERSION}" > "/tmp/{{ item.name }}_version"
  args:
    executable: /bin/bash
  environment: "{{ asdf_env }}"
  become: true
  become_user: "{{ asdf_username }}"
  register: plugin_versions
  changed_when: false
  loop: "{{ asdf_plugins }}"

- name: Generate .tool-versions file
  ansible.builtin.template:
    src: tool-versions.j2
    dest: "{{ ansible_env.HOME }}/.tool-versions"
    owner: "{{ asdf_username }}"
    group: "{{ asdf_usergroup }}"
    mode: "0644"
  become: "{{ ansible_facts['os_family'] != 'Darwin' }}"

- name: Ensure proper ownership of ASDF directory
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.asdf"
    state: directory
    owner: "{{ asdf_username }}"
    group: "{{ asdf_username }}"
    recurse: true
  become: true
