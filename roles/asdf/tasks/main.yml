---
- name: Include OS-specific variables.
  ansible.builtin.include_vars: "{{ asdf_os_family }}.yml"

- name: Include OS-Specific tasks
  ansible.builtin.include_tasks: "setup-{{ asdf_os_family }}.yml"

- name: Clone asdf
  ansible.builtin.git:
    repo: "{{ asdf_git_repo }}"
    dest: "{{ asdf_dest_folder }}"
    clone: yes
    update: no

- name: Check if setup_asdf.sh exists locally
  ansible.builtin.stat:
    path: "{{ asdf_setup_script }}"
  register: setup_asdf_stat

- name: Download setup_asdf.sh
  ansible.builtin.get_url:
    url: "{{ asdf_setup_script_url }}"
    dest: "{{ asdf_setup_script }}"
    mode: "0644"
  when: not setup_asdf_stat.stat.exists

- name: Check if ~/.tool-versions exists locally
  ansible.builtin.stat:
    path: "{{ asdf_tool_versions }}"
  register: asdf_tool_versions_stat

- name: Download ~/.tool-versions
  ansible.builtin.get_url:
    url: "https://github.com/l50/dotfiles/blob/main/.tool-versions"
    dest: "{{ asdf_tool_versions }}"
    mode: "0644"
  when: not asdf_tool_versions_stat.stat.exists

- name: Execute setup_asdf.sh for Bash
  ansible.builtin.script:
    cmd: "{{ asdf_setup_script }} golang python ruby" # TODO variableize this
  args:
    executable: /bin/bash
  when: ansible_user_shell is search('/bash')

- name: Execute setup_asdf.sh for Zsh
  ansible.builtin.script:
    cmd: "{{ asdf_setup_script }} golang python ruby" # TODO variableize this
  args:
    executable: /bin/zsh
  when: ansible_user_shell is search('/zsh')
