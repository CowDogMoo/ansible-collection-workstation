---
- name: Verify
  hosts: all
  gather_facts: true
  tasks:
    - name: Include default variables
      ansible.builtin.include_vars:
        file: "../../defaults/main.yml"

    - name: Set OS family variable
      ansible.builtin.set_fact:
        asdf_os_family: "{{ ansible_facts['os_family'] | lower }}"

    - name: Include OS-specific variables
      ansible.builtin.include_vars:
        file: "../../vars/{{ asdf_os_family }}.yml"

    - name: Include OS-Specific tasks
      ansible.builtin.include_tasks: "../../tasks/setup_{{ asdf_os_family }}.yml"

    - name: Check if necessary packages are installed on Debian-based systems
      ansible.builtin.command: "dpkg -l {{ item }}"
      changed_when: false
      with_items: "{{ asdf_install_packages }}"
      register: dpkg_result
      failed_when: "'no packages found' in dpkg_result.stdout"
      when: asdf_os_family == 'debian'

    - name: Check if necessary packages are installed on redhat-based systems
      ansible.builtin.command: "dnf list installed {{ item }}"
      changed_when: false
      with_items: "{{ asdf_install_packages }}"
      register: dnf_result
      failed_when: "'no packages found' in dnf_result.stdout"
      when: asdf_os_family == 'redhat'

    - name: Check if asdf is cloned
      ansible.builtin.stat:
        path: "{{ asdf_dest_folder }}"
      register: asdf_clone_result

    - name: Assert that asdf is cloned
      ansible.builtin.assert:
        that:
          - asdf_clone_result.stat.exists
          - asdf_clone_result.stat.isdir

    - name: Check if setup_asdf.sh exists locally
      ansible.builtin.stat:
        path: "{{ asdf_setup_script }}"
      register: setup_asdf_stat

    - name: Assert that setup_asdf.sh exists and is executable
      ansible.builtin.assert:
        that:
          - setup_asdf_stat.stat.exists

    - name: Check if ~/.tool-versions exists locally
      ansible.builtin.stat:
        path: "{{ (asdf_setup_script | selectattr('name', 'equalto', '.tool-versions') | map(attribute='path') | first) }}"
      register: asdf_tool_versions_stat

    - name: Assert that ~/.tool-versions exists
      ansible.builtin.assert:
        that:
          - asdf_tool_versions_stat.stat.exists
          - asdf_tool_versions_stat.stat.mode == "0644"

    - name: Assert asdf directory is '/usr/local/asdf' when asdf_install_for_all_users is true
      ansible.builtin.assert:
        that:
          - asdf_dest_folder == '/usr/local/asdf'
      when: asdf_install_for_all_users

    - name: Assert asdf directory is `~/.asdf` when `asdf_install_for_all_users` is false
      ansible.builtin.assert:
        that:
          - asdf_dest_folder == '{{ ansible_env.HOME }}/.asdf'
      when: not asdf_install_for_all_users

    - name: Check if ~/.asdf or /usr/local/asdf directory is created
      ansible.builtin.stat:
        path: "{{ asdf_dest_folder }}"
      register: asdf_directory

    - name: Check ASDF path in PATH variable in shell profile
      ansible.builtin.lineinfile:
        path: "{{ ansible_env.HOME }}/{{ (ansible_user_shell == '/bin/zsh') | ternary('.zshrc', '.bashrc') }}"
        line: "export PATH=$PATH:{{ asdf_dest_folder }}/bin"
        state: present

    - name: Verify ASDF is accessible
      ansible.builtin.command: "{{ asdf_dest_folder }}/bin/asdf --version"
      register: asdf_check
      failed_when: asdf_check.rc != 0
      changed_when: false

    - name: Check sourcing of asdf.sh in shell profile
      ansible.builtin.lineinfile:
        path: "/root/{{ (ansible_user_shell == '/bin/zsh') | ternary('.zshrc', '.bashrc') }}"
        line: '. "/root/.asdf/asdf.sh"'
        state: present

    - name: Check contents of shell profile
      ansible.builtin.command:
        cmd: "cat {{ ansible_env.HOME }}/{{ (ansible_user_shell == '/bin/zsh') | ternary('.zshrc', '.bashrc') }}"
      register: shell_profile_contents
      changed_when: false

    - name: Simulate failed package installation
      block:
        - name: Rename package manager temporarily (Debian)
          ansible.builtin.command: mv /usr/bin/apt /usr/bin/apt_backup
          when: ansible_facts.os_family == 'Debian'
          changed_when: false

        - name: Rename package manager temporarily (RedHat)
          ansible.builtin.command: mv /usr/bin/dnf /usr/bin/dnf_backup
          when: ansible_facts.os_family == 'RedHat'
          changed_when: false

        - name: Run role to check error handling
          ansible.builtin.include_role:
            name: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') | basename }}"
      rescue:
        - name: Restore package manager (Debian)
          ansible.builtin.command: mv /usr/bin/apt_backup /usr/bin/apt
          when: ansible_facts.os_family == 'Debian'
          changed_when: false

        - name: Restore package manager (RedHat)
          ansible.builtin.command: mv /usr/bin/dnf_backup /usr/bin/dnf
          when: ansible_facts.os_family == 'RedHat'
          changed_when: false

    - name: Confirm necessary files are present for each user
      ansible.builtin.stat:
        path: "/home/{{ user_item_check.0.username }}/{{ user_item_check.1.path }}"
      loop: "{{ asdf_users | product(item_checks) | list }}"
      loop_control:
        loop_var: user_item_check
      vars:
        item_checks:
          - name: .asdf directory
            path: .asdf
          - name: .tool-versions file
            path: .tool-versions
