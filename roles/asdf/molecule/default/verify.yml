---
- name: Verify
  hosts: all
  gather_facts: true
  tasks:
    - name: Include OS-specific variables
      ansible.builtin.include_vars:
        file: "../../vars/{{ ansible_facts['os_family'] | lower }}.yml"

    - name: Check if necessary packages are installed on Debian-based systems
      ansible.builtin.command: "dpkg -l {{ item }}"
      changed_when: false
      with_items: "{{ asdf_install_packages }}"
      register: dpkg_result
      failed_when: "'no packages found' in dpkg_result.stdout"
      when: asdf_os_family == 'debian'

    - name: Check if necessary packages are installed on redhat-based systems
      ansible.builtin.command: "dnf list installed {{ item }}"
      changed_when: false
      with_items: "{{ asdf_install_packages }}"
      register: dnf_result
      failed_when: "'no packages found' in dnf_result.stdout"
      when: asdf_os_family == 'redhat'

    - name: Check if asdf is cloned
      ansible.builtin.stat:
        path: "{{ asdf_dest_folder }}"
      register: asdf_clone_result

    - name: Assert that asdf is cloned
      ansible.builtin.assert:
        that:
          - asdf_clone_result.stat.exists
          - asdf_clone_result.stat.isdir

    - name: Check if setup_asdf.sh exists locally
      ansible.builtin.stat:
        path: "{{ asdf_setup_script }}"
      register: setup_asdf_stat

    - name: Assert that setup_asdf.sh exists and is executable
      ansible.builtin.assert:
        that:
          - setup_asdf_stat.stat.exists

    - name: Check if ~/.tool-versions exists locally
      ansible.builtin.stat:
        path: "{{ asdf_tool_versions }}"
      register: asdf_tool_versions_stat

    - name: Assert that ~/.tool-versions exists
      ansible.builtin.assert:
        that:
          - asdf_tool_versions_stat.stat.exists
          - asdf_tool_versions_stat.stat.mode == "0644"

    - name: Check if ~/.asdf directory is created
      ansible.builtin.stat:
        path: "{{ ansible_env.HOME }}/.asdf"
      register: asdf_directory

    - name: Assert that ~/.asdf directory exists
      ansible.builtin.assert:
        that:
          - asdf_directory.stat.exists
          - asdf_directory.stat.isdir
        fail_msg: "{{ ansible_env.HOME }}/.asdf directory does not exist or is not a directory"
        success_msg: "{{ ansible_env.HOME }}/.asdf directory exists and is a directory"

    - name: Check ASDF path in PATH variable in shell profile
      ansible.builtin.lineinfile:
        path: "/root/{{ (ansible_user_shell == '/bin/zsh') | ternary('.zshrc', '.bashrc') }}"
        line: "export PATH=$PATH:$ASDF_PATH"
        state: present

    - name: Check sourcing of asdf.sh in shell profile
      ansible.builtin.lineinfile:
        path: "/root/{{ (ansible_user_shell == '/bin/zsh') | ternary('.zshrc', '.bashrc') }}"
        line: '. "/root/.asdf/asdf.sh"'
        state: present

    - name: Check contents of shell profile
      ansible.builtin.command:
        cmd: "cat {{ ansible_env.HOME }}/{{ (ansible_user_shell == '/bin/zsh') | ternary('.zshrc', '.bashrc') }}"
      register: shell_profile_contents
      changed_when: false

    - name: Verify ASDF is accessible
      ansible.builtin.command: "/root/.asdf/bin/asdf --version"
      register: asdf_check
      failed_when: asdf_check.rc != 0
      changed_when: false

    - name: Simulate failed package installation
      block:
        - name: Rename package manager temporarily (Debian)
          ansible.builtin.command: mv /usr/bin/apt /usr/bin/apt_backup
          when: ansible_facts.os_family == 'Debian'
          changed_when: false

        - name: Rename package manager temporarily (RedHat)
          ansible.builtin.command: mv /usr/bin/dnf /usr/bin/dnf_backup
          when: ansible_facts.os_family == 'RedHat'
          changed_when: false

        - name: Run role to check error handling
          ansible.builtin.include_role:
            name: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') | basename }}"
      rescue:
        - name: Restore package manager (Debian)
          ansible.builtin.command: mv /usr/bin/apt_backup /usr/bin/apt
          when: ansible_facts.os_family == 'Debian'
          changed_when: false

        - name: Restore package manager (RedHat)
          ansible.builtin.command: mv /usr/bin/dnf_backup /usr/bin/dnf
          when: ansible_facts.os_family == 'RedHat'
          changed_when: false
