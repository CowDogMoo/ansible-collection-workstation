---
- name: Gather available local users
  ansible.builtin.getent:
    database: passwd
  register: getent_passwd
  when: ansible_os_family != 'Darwin' and ansible_os_family != 'Windows'

- name: Gather available local users on macOS
  cowdogmoo.workstation.getent_passwd:
  register: getent_passwd
  when: ansible_os_family == 'Darwin'

- name: Gather the list of unique shells to install
  become: true
  ansible.builtin.set_fact:
    # Gather the list of unique shells to install.
    # 1. Extract 'shell' attribute from each user.
    # 2. Filter out duplicate shell entries.
    # 3. Strip the '/bin/' prefix from each shell name.
    # 4. Convert the result into a list.
    unique_shells: "{{ user_setup_default_users | map(attribute='shell') | unique | map('regex_replace', '^/bin/(.*)$', '\\1') | list }}"
  when: ansible_os_family != 'Windows'

- name: Install base packages for all users
  become: true
  ansible.builtin.package:
    name: "{{ user_setup_install_packages }}"
    state: present
    update_cache: true
  environment: "{{ (ansible_os_family == 'Debian') | ternary({'DEBIAN_FRONTEND': 'noninteractive'}, {}) }}"
  when: ansible_os_family not in ['Darwin', 'Windows']

- name: Install user-specific shells
  become: true
  ansible.builtin.package:
    name: "{{ shell }}"
    state: present
  loop: "{{ unique_shells }}"
  loop_control:
    loop_var: shell
  when:
    - shell != ''
    - shell != 'bash'
    - ansible_os_family not in ['Darwin', 'Windows']
  environment: "{{ (ansible_os_family == 'Debian') | ternary({'DEBIAN_FRONTEND': 'noninteractive'}, {}) }}"

- name: Ensure groups exist for users
  become: true
  ansible.builtin.group:
    name: "{{ group.usergroup }}"
    state: present
  loop: "{{ user_setup_default_users }}"
  loop_control:
    loop_var: group
  when: group.usergroup is defined and ansible_os_family not in ['Darwin', 'Windows']

- name: Create users on non-Windows systems
  become: true
  ansible.builtin.user:
    name: "{{ user.username }}"
    group: "{{ user.usergroup }}"
    shell: "{{ user.shell }}"
    home: "{{ '/Users' if ansible_os_family == 'Darwin' else '/home' }}/{{ user.username }}"
    state: present
  loop: "{{ user_setup_default_users }}"
  loop_control:
    loop_var: user
  when:
    - ansible_os_family != 'Windows'
    - user.username not in ansible_facts.getent_passwd
    - user.username != 'root'

- name: Ensure users exist and have home directories
  ansible.builtin.user:
    name: "{{ user.username }}"
    group: "{{ user.usergroup }}"
    shell: "{{ user.shell }}"
    create_home: true
    move_home: false
    home: "{{ '/Users' if ansible_os_family == 'Darwin' else '/home' }}/{{ user.username }}"
  register: user_info
  loop: "{{ user_setup_default_users }}"
  loop_control:
    loop_var: user
  when:
    - ansible_os_family != 'Windows'
    - user.username not in ansible_facts.getent_passwd

- name: Provide sudoers access for relevant users in sudoers.d
  become: true
  ansible.builtin.copy:
    dest: "/etc/sudoers.d/{{ user.username }}"
    content: "{{ user.username }} ALL=(ALL:ALL) NOPASSWD:ALL\n"
    validate: "visudo -cf %s"
    mode: "0440"
  when:
    - ansible_os_family not in ['Darwin', 'Windows']
    - user.sudo
  loop: "{{ user_setup_default_users }}"
  loop_control:
    loop_var: user

- name: Create a new user on Windows
  ansible.windows.win_user:
    name: "{{ user.username }}"
    password: "{{ user.password }}"
    state: present
    password_expired: true
  loop: "{{ user_setup_default_users }}"
  loop_control:
    loop_var: user
  when: ansible_os_family == 'Windows'

- name: Ensure groups exist for users on Windows
  ansible.windows.win_group_membership:
    name: "{{ group.usergroup }}"
    members: "{{ user.username }}"
    state: present
  loop: "{{ user_setup_default_users }}"
  loop_control:
    loop_var: group
  when: ansible_os_family == 'Windows' and group.usergroup is defined
