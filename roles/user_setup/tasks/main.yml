---
- name: Gather the list of unique shells to install
  ansible.builtin.set_fact:
    unique_shells: "{{ user_setup_default_users | map(attribute='shell') | unique | map('regex_replace', '^/bin/(.*)$', '\\1') | list }}"
  tags: always

- name: Install base packages
  become: true
  ansible.builtin.package:
    name: "{{ user_setup_install_packages }}"
    state: present
    update_cache: true
  environment: "{{ (ansible_os_family == 'Debian') | ternary({'DEBIAN_FRONTEND': 'noninteractive'}, {}) }}"
  tags: packages

- name: Install user-specific shells
  become: true
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  loop: "{{ unique_shells }}"
  when: item != '' and item != 'bash'
  environment:
    DEBIAN_FRONTEND: "{{ 'noninteractive' if ansible_distribution == 'Debian' else '' }}"
  tags: shells

- name: Ensure groups exist for users
  become: true
  ansible.builtin.group:
    name: "{{ item.usergroup }}"
    state: present
  loop: "{{ user_setup_default_users }}"
  when: item.usergroup is defined and item.usergroup != ''
  tags: group-setup

- name: Create users
  become: true
  ansible.builtin.user:
    name: "{{ item.username }}"
    group: "{{ item.usergroup }}"
    shell: "{{ item.shell }}"
  loop: "{{ user_setup_default_users }}"
  tags: user-setup

- name: Provide sudoers access for relevant users in sudoers.d
  become: true
  ansible.builtin.copy:
    dest: "/etc/sudoers.d/{{ item.username }}"
    content: "{{ item.username }} ALL=(ALL:ALL) NOPASSWD:ALL\n"
    validate: "visudo -cf %s"
    mode: "0440"
  when: item.sudo
  loop: "{{ user_setup_default_users }}"
  tags: sudo-setup
